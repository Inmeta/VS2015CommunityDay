using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;
// <copyright file="FlexibleTeacherTest.PaymentDue.g.cs">Copyright ©  2014</copyright>
// <auto-generated>
// This file contains automatically generated tests.
// Do not modify this file manually.
// 
// If the contents of this file becomes outdated, you can delete it.
// For example, if it no longer compiles.
// </auto-generated>
using System;

namespace CSharp
{
    public partial class FlexibleTeacherTest
    {
[TestMethod]
[PexGeneratedBy(typeof(FlexibleTeacherTest))]
public void PaymentDue701()
{
    FlexibleTeacher flexibleTeacher;
    int i;
    flexibleTeacher = FlexibleTeacherFactory.Create((string)null);
    i = this.PaymentDue(flexibleTeacher, 0);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)flexibleTeacher);
    Assert.AreEqual<string>((string)null, ((Teacher)flexibleTeacher).Name);
    Assert.AreEqual<int>(1, ((Teacher)flexibleTeacher).HourlyRate);
}
[TestMethod]
[PexGeneratedBy(typeof(FlexibleTeacherTest))]
public void PaymentDue106()
{
    FlexibleTeacher flexibleTeacher;
    int i;
    flexibleTeacher = FlexibleTeacherFactory.Create((string)null);
    i = this.PaymentDue(flexibleTeacher, 20);
    Assert.AreEqual<int>(40, i);
    Assert.IsNotNull((object)flexibleTeacher);
    Assert.AreEqual<string>((string)null, ((Teacher)flexibleTeacher).Name);
    Assert.AreEqual<int>(1, ((Teacher)flexibleTeacher).HourlyRate);
}
[TestMethod]
[PexGeneratedBy(typeof(FlexibleTeacherTest))]
public void PaymentDue21()
{
    FlexibleTeacher flexibleTeacher;
    int i;
    flexibleTeacher = FlexibleTeacherFactory.Create((string)null);
    i = this.PaymentDue(flexibleTeacher, 101);
    Assert.AreEqual<int>(1010, i);
    Assert.IsNotNull((object)flexibleTeacher);
    Assert.AreEqual<string>((string)null, ((Teacher)flexibleTeacher).Name);
    Assert.AreEqual<int>(1, ((Teacher)flexibleTeacher).HourlyRate);
}
[TestMethod]
[PexGeneratedBy(typeof(FlexibleTeacherTest))]
public void PaymentDue731()
{
    FlexibleTeacher flexibleTeacher;
    int i;
    flexibleTeacher = FlexibleTeacherFactory.Create((string)null);
    i = this.PaymentDue(flexibleTeacher, 36);
    Assert.AreEqual<int>(180, i);
    Assert.IsNotNull((object)flexibleTeacher);
    Assert.AreEqual<string>((string)null, ((Teacher)flexibleTeacher).Name);
    Assert.AreEqual<int>(1, ((Teacher)flexibleTeacher).HourlyRate);
}
    }
}
